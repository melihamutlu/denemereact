// Card.tsx
import React, { useState, ChangeEvent } from "react";
import { TaskItem } from "../modals/Task";

interface CardProps {
  // arayüzün işlev ve özellikelri
  taskObj: TaskItem;
  index: number;
  deleteTask: () => void;
  updateListArray: (editedTask: TaskItem) => void; // düzenleme işlevi tamamandığında güncelle
  taskList: TaskItem[];
  setTaskList: (taskList: TaskItem[]) => void; // görev listesini güncelle
}

const Card: React.FC<CardProps> = ({
  taskObj,
  index,
  deleteTask,
  updateListArray,
  taskList,
  setTaskList,
}) => {
  const [editedTask, setEditedTask] = useState<TaskItem>();

  const colors = [
    {
      primaryColor: "#5D93E1",
      secondaryColor: "#ECF3FC",
    },
    {
      primaryColor: "#F9D288",
      secondaryColor: "#FEFAF1",
    },
    {
      primaryColor: "#5DC250",
      secondaryColor: "#F2FAF1",
    },
    {
      primaryColor: "#F48687",
      secondaryColor: "#FDF1F1",
    },
    {
      primaryColor: "#B964F7",
      secondaryColor: "#F3F0FD",
    },
  ];

  const handleDelete = () => {
    const updatedList = taskList.filter((_, i) => i !== index);
    localStorage.setItem("taskList", JSON.stringify(updatedList));
    setTaskList(updatedList);
    //
  };

  return (
    <div className="card-wrapper mr-5">
      <div
        className="card-top"
        style={{ backgroundColor: colors[index % 5].primaryColor }}
      ></div>
      <div className="task-holder">
        <button className="delete-button" onClick={handleDelete}>
          <i className="fa fa-trash close-icon"></i>
        </button>
        <span
          className="card-header"
          style={{
            backgroundColor: colors[index % 5].secondaryColor,
            borderRadius: "10px",
          }}
        >
          {editedTask ? (
            <>
              <input
                value={editedTask.Name}
                onChange={(e) =>
                  setEditedTask((p) => {
                    return {
                      Description: p!.Description,
                      Name: e.target.value,
                    };
                  })
                }
                className="w-100"
              />
            </>
          ) : (
            <>{taskObj.Name}</>
          )}
        </span>

        <div style={{ position: "absolute", right: "20px", bottom: "20px" }}>
          {editedTask ? (
            <>
              <button
                onClick={() => {
                  updateListArray(editedTask);
                  setEditedTask(undefined);
                }}
              >
                Save
              </button>
              <button onClick={() => setEditedTask(undefined)}>Cancel</button>
            </>
          ) : (
            <>
              <i
                className="fa fa-pencil edit-icon"
                onClick={() => {
                  setEditedTask({ ...taskObj });
                }}
              ></i>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Card;
